"MasterLaunchConfig": {
  "Type": "AWS::AutoScaling::LaunchConfiguration",
  "Properties": {
    "BlockDeviceMappings": [{
      "DeviceName": "/dev/sdb",
      "VirtualName": "ephemeral0"
    }],
    "AssociatePublicIpAddress": "true",
    "IamInstanceProfile": {
      "Ref": "MasterInstanceProfile"
    },
    "InstanceType": {
      "Ref": "MasterInstanceType"
    },
    "KeyName": {
      "Ref": "KeyName"
    },
    "UserData": {
      "Fn::Base64": {
        "Fn::Join": [
          "", [
            "#cloud-config\n",
            "\"coreos\":\n",
            "  \"units\":\n",
            "  - \"name\": |-\n",
            "      go-aws-mon.timer\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Push Instance Metric with go-aws-mon every minute\n",
            "      [Timer]\n",
            "      OnBootSec=10min\n",
            "      OnCalendar=minutely\n",
            "      Unit=go-aws-mon.service\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      go-aws-mon.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=go-aws-mon\n",
            "      [Service]\n",
            "      ExecStart=/home/core/go-aws-mon.sh\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      etcd.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      update-engine.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      locksmithd.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"name\": |-\n",
            "      systemd-resolved.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Formats the /var/lib ephemeral drive\n",
            "      Before=var-lib.mount dbus.service\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      RemainAfterExit=yes\n",
            "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
            "    \"name\": |-\n",
            "      format-var-lib-ephemeral.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Mount /var/lib\n",
            "      Before=dbus.service\n",
            "      [Mount]\n",
            "      What=/dev/xvdb\n",
            "      Where=/var/lib\n",
            "      Type=ext4\n",
            "    \"name\": |-\n",
            "      var-lib.mount\n",
            "  - \"command\": |-\n",
            "      restart\n",
            "    \"name\": |-\n",
            "      systemd-journald.service\n",
            "  - \"command\": |-\n",
            "      restart\n",
            "    \"name\": |-\n",
            "      docker.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Before=dcos.target\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
            "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
            "    \"name\": |-\n",
            "      dcos-link-env.service\n",
            "  - \"content\": |\n",
            "      [Unit]\n",
            "      Description=Download the DCOS\n",
            "      After=network-online.target\n",
            "      Wants=network-online.target\n",
            "      ConditionPathExists=!/opt/mesosphere/\n",
            "      [Service]\n",
            "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/curl --fail --retry 20 --continue-at - --location --silent --show-error --verbose --output /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
            "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
            "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
            "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
            "    \"name\": |-\n",
            "      dcos-download.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Prep the Pkgpanda working directories for this host.\n",
            "      Requires=dcos-download.service\n",
            "      After=dcos-download.service\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      EnvironmentFile=/opt/mesosphere/environment\n",
            "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      dcos-setup.service\n",
            "    \"no_block\": !!bool |-\n",
            "      true\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |-\n",
            "      [Unit]\n",
            "      Description=Signal CloudFormation Success\n",
            "      After=dcos.target\n",
            "      Requires=dcos.target\n",
            "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
            "      [Service]\n",
            "      Type=simple\n",
            "      Restart=on-failure\n",
            "      StartLimitInterval=0\n",
            "      RestartSec=15s\n",
            "      EnvironmentFile=/opt/mesosphere/environment\n",
            "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
            "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
            "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
            "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
            "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
            "    \"name\": |-\n",
            "      dcos-cfn-signal.service\n",
            "  \"update\":\n",
            "    \"reboot-strategy\": |-\n",
            "      off\n",
            "\"write_files\":\n",
            "- \"path\": |-\n",
            "    /home/core/go-aws-mon.sh\n",
            "  \"permissions\": !!int |-\n",
            "    755\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    #!/bin/bash - \n",
            "    if [ ! -x /home/core/go-aws-mon ]; then\n",
            "        wget -O /home/core/go-aws-mon https://github.com/a3linux/go-aws-mon/raw/master/bin/go-aws-mon\n",
            "        chmod +x /home/core/go-aws-mon\n",
            "    fi\n",
            "",
            "\n",
            "    /home/core/go-aws-mon --mem-used --mem-avail --disk-space-used --disk-space-avail --disk-inode-util --disk-path=/,/var/lib\n",
            "",
            "\n",
            "- \"content\": |\n",
            "    https://downloads.mesosphere.com/dcos/stable\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/repository-url\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    BOOTSTRAP_ID=18d094b1648521b017622180e3a8e05788a81e80\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/bootstrap-id\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    [\"dcos-config--setup_39bcd04b14a990a870cdff4543566e78d7507ba5\", \"dcos-metadata--setup_39bcd04b14a990a870cdff4543566e78d7507ba5\"]\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    [Journal]\n",
            "    MaxLevelConsole=warning\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/systemd/journald.conf.d/dcos.conf\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    ", {
              "Ref": "AWS::StackId"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/cluster-id\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    AWS_REGION=", {
              "Ref": "AWS::Region"
            },
            "",
            "\n",
            "    AWS_STACK_ID=", {
              "Ref": "AWS::StackId"
            },
            "",
            "\n",
            "    AWS_STACK_NAME=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "    AWS_IAM_MASTER_ROLE_NAME=", {
              "Ref": "MasterRole"
            },
            "",
            "\n",
            "    AWS_IAM_SLAVE_ROLE_NAME=", {
              "Ref": "PrivateSlaveRole"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
            "- \"content\": |\n",
            "    MESOS_CLUSTER=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
            "- \"content\": |\n",
            "    MASTER_SOURCE=exhibitor\n",
            "    EXHIBITOR_ADDRESS=", {
              "Fn::GetAtt": [
                "InternalMasterLoadBalancer",
                "DNSName"
              ]
            },
            "",
            "\n",
            "    RESOLVERS=169.254.169.253\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
            "- \"content\": |\n",
            "    EXHIBITOR_BACKEND=AWS_S3\n",
            "    AWS_REGION=", {
              "Ref": "AWS::Region"
            },
            "",
            "\n",
            "    AWS_S3_BUCKET=", {
              "Ref": "ExhibitorS3Bucket"
            },
            "",
            "\n",
            "    AWS_S3_PREFIX=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
            "- \"content\": |-\n",
            "    {}\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/master\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/aws_master\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/aws\n"
          ]
        ]
      }
    },
    "SecurityGroups": [{
      "Ref": "MasterSecurityGroup"
    }, {
      "Ref": "AdminSecurityGroup"
    }],
    "ImageId": {
      "Fn::FindInMap": [
        "RegionToAmi", {
          "Ref": "AWS::Region"
        },
        "stable"
      ]
    }
  }
},
"SlaveLaunchConfig": {
  "Type": "AWS::AutoScaling::LaunchConfiguration",
  "Properties": {
    "BlockDeviceMappings": [{
      "DeviceName": "/dev/sdb",
      "VirtualName": "ephemeral0"
    }],
    "AssociatePublicIpAddress": "false",
    "IamInstanceProfile": {
      "Ref": "PrivateSlaveInstanceProfile"
    },
    "InstanceType": {
      "Ref": "PrivateSlaveInstanceType"
    },
    "KeyName": {
      "Ref": "KeyName"
    },
    "UserData": {
      "Fn::Base64": {
        "Fn::Join": [
          "", [
            "#cloud-config\n",
            "\"coreos\":\n",
            "  \"units\":\n",
            "  - \"name\": |-\n",
            "      remove-docker-images.timer\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Delete Docker Images when there is less indoes\n",
            "      [Timer]\n",
            "      OnBootSec=60min\n",
            "      OnCalendar=daily\n",
            "      Unit=remove-docker-images.service\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      remove-docker-images.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=remove-docker-images\n",
            "      [Service]\n",
            "      ExecStart=/home/core/removeDockerImages.sh\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      go-aws-mon.timer\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Push Instance Metric with go-aws-mon every minute\n",
            "      [Timer]\n",
            "      OnBootSec=10min\n",
            "      OnCalendar=minutely\n",
            "      Unit=go-aws-mon.service\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      go-aws-mon.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=go-aws-mon\n",
            "      [Service]\n",
            "      ExecStart=/home/core/go-aws-mon.sh\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      download-gof3r.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"no_block\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Download gof3r\n",
            "      After=network-online.target\n",
            "      Wants=network-online.target\n",
            "      ConditionPathExists=!/opt/gof3r/gof3r\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/wget --tries 10 --continue -O /tmp/gof3r_0.5.0_linux_amd64.tar.gz https://github.com/rlmcpherson/s3gof3r/releases/download/v0.5.0/gof3r_0.5.0_linux_amd64.tar.gz\n",
            "      ExecStartPre=/usr/bin/mkdir -p /opt\n",
            "      ExecStart=/usr/bin/tar zxvf /tmp/gof3r_0.5.0_linux_amd64.tar.gz -C /opt\n",
            "      ExecStartPost=/usr/bin/rm -f /tmp/gof3r_0.5.0_linux_amd64.tar.gz\n",
            "      ExecStartPost=/usr/bin/mv /opt/gof3r_0.5.0_linux_amd64 /opt/gof3r\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      etcd.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      update-engine.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      locksmithd.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"name\": |-\n",
            "      systemd-resolved.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Formats the /var/lib ephemeral drive\n",
            "      Before=var-lib.mount dbus.service\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      RemainAfterExit=yes\n",
            "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
            "    \"name\": |-\n",
            "      format-var-lib-ephemeral.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Mount /var/lib\n",
            "      Before=dbus.service\n",
            "      [Mount]\n",
            "      What=/dev/xvdb\n",
            "      Where=/var/lib\n",
            "      Type=ext4\n",
            "    \"name\": |-\n",
            "      var-lib.mount\n",
            "  - \"command\": |-\n",
            "      restart\n",
            "    \"name\": |-\n",
            "      systemd-journald.service\n",
            "  - \"command\": |-\n",
            "      restart\n",
            "    \"name\": |-\n",
            "      docker.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Before=dcos.target\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
            "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
            "    \"name\": |-\n",
            "      dcos-link-env.service\n",
            "  - \"content\": |\n",
            "      [Unit]\n",
            "      Description=Download the DCOS\n",
            "      After=network-online.target\n",
            "      Wants=network-online.target\n",
            "      ConditionPathExists=!/opt/mesosphere/\n",
            "      [Service]\n",
            "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/curl --fail --retry 20 --continue-at - --location --silent --show-error --verbose --output /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
            "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
            "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
            "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
            "    \"name\": |-\n",
            "      dcos-download.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Prep the Pkgpanda working directories for this host.\n",
            "      Requires=dcos-download.service\n",
            "      After=dcos-download.service\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      EnvironmentFile=/opt/mesosphere/environment\n",
            "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      dcos-setup.service\n",
            "    \"no_block\": !!bool |-\n",
            "      true\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |-\n",
            "      [Unit]\n",
            "      Description=Signal CloudFormation Success\n",
            "      After=dcos.target\n",
            "      Requires=dcos.target\n",
            "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
            "      [Service]\n",
            "      Type=simple\n",
            "      Restart=on-failure\n",
            "      StartLimitInterval=0\n",
            "      RestartSec=15s\n",
            "      EnvironmentFile=/opt/mesosphere/environment\n",
            "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
            "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
            "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
            "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
            "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
            "    \"name\": |-\n",
            "      dcos-cfn-signal.service\n",
            "  \"update\":\n",
            "    \"reboot-strategy\": |-\n",
            "      off\n",
            "\"write_files\":\n",
            "- \"path\": |-\n",
            "    /home/core/.dockercfg\n",
            "  \"permissions\": !!int |-\n",
            "    644\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    {\n",
            "           \"https://index.docker.io/v1/\":{\n",
            "           \"auth\": \"", {
              "Ref": "DockerHubAuth"
            },
            "\",", "\n",
            "           \"email\": \"", {
              "Ref": "DockerHubEmail"
            },
            "\"", "\n",
            "           }\n",
            "    }\n",
            "\n",
            "- \"path\": |-\n",
            "    /home/core/.docker/config.json\n",
            "  \"permissions\": !!int |-\n",
            "    644\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    {\n",
            "       \"auths\": {\n",
            "           \"https://index.docker.io/v1/\":{\n",
            "           \"auth\": \"", {
              "Ref": "DockerHubAuth"
            },
            "\",", "\n",
            "           \"email\": \"", {
              "Ref": "DockerHubEmail"
            },
            "\"", "\n",
            "           }\n",
            "       }\n",
            "    }\n",
            "\n",
            "- \"path\": |-\n",
            "    /home/core/go-aws-mon.sh\n",
            "  \"permissions\": !!int |-\n",
            "    755\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    #!/bin/bash - \n",
            "    if [ ! -x /home/core/go-aws-mon ]; then\n",
            "        wget -O /home/core/go-aws-mon https://github.com/a3linux/go-aws-mon/raw/master/bin/go-aws-mon\n",
            "        chmod +x /home/core/go-aws-mon\n",
            "    fi\n",
            "",
            "\n",
            "    /home/core/go-aws-mon --mem-used --mem-avail --disk-space-used --disk-space-avail --disk-inode-util --disk-path=/,/var/lib\n",
            "",
            "\n",
            "- \"path\": |-\n",
            "    /home/core/removeDockerImages.sh\n",
            "  \"permissions\": !!int |-\n",
            "    755\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    #!/bin/bash - \n",
            "    inodeUsage=`df -ih | grep \"/var/lib\" | awk '{print $5}' | tr \"%\" \" \"`\n",
            "    docker rm -v $(docker ps -a -q -f status=exited)\n",
            "    if [ $inodeUsage -ge 50  ]; then\n",
            "        docker rmi `docker images | awk '{print $3'}`\n",
            "    fi\n",
            "\n",
            "- \"content\": |\n",
            "    https://downloads.mesosphere.com/dcos/stable\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/repository-url\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    BOOTSTRAP_ID=18d094b1648521b017622180e3a8e05788a81e80\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/bootstrap-id\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    [\"dcos-config--setup_39bcd04b14a990a870cdff4543566e78d7507ba5\", \"dcos-metadata--setup_39bcd04b14a990a870cdff4543566e78d7507ba5\"]\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    [Journal]\n",
            "    MaxLevelConsole=warning\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/systemd/journald.conf.d/dcos.conf\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    ", {
              "Ref": "AWS::StackId"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/cluster-id\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    AWS_REGION=", {
              "Ref": "AWS::Region"
            },
            "",
            "\n",
            "    AWS_STACK_ID=", {
              "Ref": "AWS::StackId"
            },
            "",
            "\n",
            "    AWS_STACK_NAME=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "    AWS_IAM_MASTER_ROLE_NAME=", {
              "Ref": "MasterRole"
            },
            "",
            "\n",
            "    AWS_IAM_SLAVE_ROLE_NAME=", {
              "Ref": "PrivateSlaveRole"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
            "- \"content\": |\n",
            "    MESOS_CLUSTER=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
            "- \"content\": |\n",
            "    MASTER_SOURCE=exhibitor\n",
            "    EXHIBITOR_ADDRESS=", {
              "Fn::GetAtt": [
                "InternalMasterLoadBalancer",
                "DNSName"
              ]
            },
            "",
            "\n",
            "    RESOLVERS=169.254.169.253\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
            "- \"content\": |\n",
            "    EXHIBITOR_BACKEND=AWS_S3\n",
            "    AWS_REGION=", {
              "Ref": "AWS::Region"
            },
            "",
            "\n",
            "    AWS_S3_BUCKET=", {
              "Ref": "ExhibitorS3Bucket"
            },
            "",
            "\n",
            "    AWS_S3_PREFIX=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
            "- \"content\": |-\n",
            "    {}\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/slave\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/aws\n"
          ]
        ]
      }
    },
    "SecurityGroups": [{
      "Ref": "SlaveSecurityGroup"
    }, {
      "Ref": "AdminSecurityGroup"
    }],
    "ImageId": {
      "Fn::FindInMap": [
        "RegionToAmi", {
          "Ref": "AWS::Region"
        },
        "stable"
      ]
    }
  }
},
"PublicSlaveLaunchConfig": {
  "Type": "AWS::AutoScaling::LaunchConfiguration",
  "Properties": {
    "BlockDeviceMappings": [{
      "DeviceName": "/dev/sdb",
      "VirtualName": "ephemeral0"
    }],
    "AssociatePublicIpAddress": "true",
    "IamInstanceProfile": {
      "Ref": "PublicSlaveInstanceProfile"
    },
    "InstanceType": {
      "Ref": "PublicSlaveInstanceType"
    },
    "KeyName": {
      "Ref": "KeyName"
    },
    "UserData": {
      "Fn::Base64": {
        "Fn::Join": [
          "", [
            "#cloud-config\n",
            "\"coreos\":\n",
            "  \"units\":\n",
            "  - \"name\": |-\n",
            "      download-gof3r.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"no_block\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Download gof3r\n",
            "      After=network-online.target\n",
            "      Wants=network-online.target\n",
            "      ConditionPathExists=!/opt/gof3r/gof3r\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/wget --tries 10 --continue -O /tmp/gof3r_0.5.0_linux_amd64.tar.gz https://github.com/rlmcpherson/s3gof3r/releases/download/v0.5.0/gof3r_0.5.0_linux_amd64.tar.gz\n",
            "      ExecStartPre=/usr/bin/mkdir -p /opt\n",
            "      ExecStart=/usr/bin/tar zxvf /tmp/gof3r_0.5.0_linux_amd64.tar.gz -C /opt\n",
            "      ExecStartPost=/usr/bin/rm -f /tmp/gof3r_0.5.0_linux_amd64.tar.gz\n",
            "      ExecStartPost=/usr/bin/mv /opt/gof3r_0.5.0_linux_amd64 /opt/gof3r\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      remove-docker-images.timer\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Delete Docker Images when there is less indoes\n",
            "      [Timer]\n",
            "      OnBootSec=60min\n",
            "      OnCalendar=weekly\n",
            "      Unit=remove-docker-images.service\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      remove-docker-images.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=remove-docker-images\n",
            "      [Service]\n",
            "      ExecStart=/home/core/removeDockerImages.sh\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      go-aws-mon.timer\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Push Instance Metric with go-aws-mon every minute\n",
            "      [Timer]\n",
            "      OnBootSec=10min\n",
            "      OnCalendar=minutely\n",
            "      Unit=go-aws-mon.service\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"name\": |-\n",
            "      go-aws-mon.service\n",
            "    \"command\": |-\n",
            "      start\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=go-aws-mon\n",
            "      [Service]\n",
            "      ExecStart=/home/core/go-aws-mon.sh\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      etcd.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      update-engine.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"mask\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      locksmithd.service\n",
            "  - \"command\": |-\n",
            "      stop\n",
            "    \"name\": |-\n",
            "      systemd-resolved.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Formats the /var/lib ephemeral drive\n",
            "      Before=var-lib.mount dbus.service\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      RemainAfterExit=yes\n",
            "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
            "    \"name\": |-\n",
            "      format-var-lib-ephemeral.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Mount /var/lib\n",
            "      Before=dbus.service\n",
            "      [Mount]\n",
            "      What=/dev/xvdb\n",
            "      Where=/var/lib\n",
            "      Type=ext4\n",
            "    \"name\": |-\n",
            "      var-lib.mount\n",
            "  - \"command\": |-\n",
            "      restart\n",
            "    \"name\": |-\n",
            "      systemd-journald.service\n",
            "  - \"command\": |-\n",
            "      restart\n",
            "    \"name\": |-\n",
            "      docker.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Before=dcos.target\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
            "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
            "    \"name\": |-\n",
            "      dcos-link-env.service\n",
            "  - \"content\": |\n",
            "      [Unit]\n",
            "      Description=Download the DCOS\n",
            "      After=network-online.target\n",
            "      Wants=network-online.target\n",
            "      ConditionPathExists=!/opt/mesosphere/\n",
            "      [Service]\n",
            "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      ExecStartPre=/usr/bin/curl --fail --retry 20 --continue-at - --location --silent --show-error --verbose --output /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
            "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
            "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
            "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
            "    \"name\": |-\n",
            "      dcos-download.service\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |\n",
            "      [Unit]\n",
            "      Description=Prep the Pkgpanda working directories for this host.\n",
            "      Requires=dcos-download.service\n",
            "      After=dcos-download.service\n",
            "      [Service]\n",
            "      Type=oneshot\n",
            "      StandardOutput=journal+console\n",
            "      StandardError=journal+console\n",
            "      EnvironmentFile=/opt/mesosphere/environment\n",
            "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
            "      [Install]\n",
            "      WantedBy=multi-user.target\n",
            "    \"enable\": !!bool |-\n",
            "      true\n",
            "    \"name\": |-\n",
            "      dcos-setup.service\n",
            "    \"no_block\": !!bool |-\n",
            "      true\n",
            "  - \"command\": |-\n",
            "      start\n",
            "    \"content\": |-\n",
            "      [Unit]\n",
            "      Description=Signal CloudFormation Success\n",
            "      After=dcos.target\n",
            "      Requires=dcos.target\n",
            "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
            "      [Service]\n",
            "      Type=simple\n",
            "      Restart=on-failure\n",
            "      StartLimitInterval=0\n",
            "      RestartSec=15s\n",
            "      EnvironmentFile=/opt/mesosphere/environment\n",
            "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
            "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"\n",
            "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
            "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
            "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
            "    \"name\": |-\n",
            "      dcos-cfn-signal.service\n",
            "  \"update\":\n",
            "    \"reboot-strategy\": |-\n",
            "      off\n",
            "\"write_files\":\n",
            "- \"path\": |-\n",
            "    /home/core/.dockercfg\n",
            "  \"permissions\": !!int |-\n",
            "    644\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    {\n",
            "           \"https://index.docker.io/v1/\":{\n",
            "           \"auth\": \"", {
              "Ref": "DockerHubAuth"
            },
            "\",", "\n",
            "           \"email\": \"", {
              "Ref": "DockerHubEmail"
            },
            "\"", "\n",
            "           }\n",
            "    }\n",
            "\n",
            "- \"path\": |-\n",
            "    /home/core/.docker/config.json\n",
            "  \"permissions\": !!int |-\n",
            "    644\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    {\n",
            "       \"auths\": {\n",
            "          \"https://index.docker.io/v1/\":{\n",
            "          \"auth\": \"", {
              "Ref": "DockerHubAuth"
            },
            "\",", "\n",
            "          \"email\": \"", {
              "Ref": "DockerHubEmail"
            },
            "\"", "\n",
            "          }\n",
            "       }\n",
            "    }\n",
            "\n",
            "- \"path\": |-\n",
            "    /home/core/go-aws-mon.sh\n",
            "  \"permissions\": !!int |-\n",
            "    755\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    #!/bin/bash - \n",
            "    if [ ! -x /home/core/go-aws-mon ]; then\n",
            "        wget -O /home/core/go-aws-mon https://github.com/a3linux/go-aws-mon/raw/master/bin/go-aws-mon\n",
            "        chmod +x /home/core/go-aws-mon\n",
            "    fi\n",
            "\n",
            "    /home/core/go-aws-mon --mem-used --mem-avail --disk-space-used --disk-space-avail --disk-inode-util --disk-path=/,/var/lib\n",
            "\n",
            "- \"path\": |-\n",
            "    /home/core/removeDockerImages.sh\n",
            "  \"permissions\": !!int |-\n",
            "    755\n",
            "  \"owner\": |-\n",
            "    core\n",
            "  \"content\": |\n",
            "    #!/bin/bash - \n",
            "    inodeUsage=`df -ih | grep \"/var/lib\" | awk '{print $5}' | tr \"%\" \" \"`\n",
            "    docker rm -v $(docker ps -a -q -f status=exited)\n",
            "    if [ $inodeUsage -ge 50  ]; then\n",
            "        docker rmi `docker images | awk '{print $3'}`\n",
            "    fi\n",
            "",
            "\n",
            "- \"content\": |\n",
            "    https://downloads.mesosphere.com/dcos/stable\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/repository-url\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    BOOTSTRAP_ID=18d094b1648521b017622180e3a8e05788a81e80\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/bootstrap-id\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    [\"dcos-config--setup_39bcd04b14a990a870cdff4543566e78d7507ba5\", \"dcos-metadata--setup_39bcd04b14a990a870cdff4543566e78d7507ba5\"]\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    [Journal]\n",
            "    MaxLevelConsole=warning\n",
            "  \"owner\": |-\n",
            "    root\n",
            "  \"path\": |-\n",
            "    /etc/systemd/journald.conf.d/dcos.conf\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    ", {
              "Ref": "AWS::StackId"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/cluster-id\n",
            "  \"permissions\": |-\n",
            "    0644\n",
            "- \"content\": |\n",
            "    AWS_REGION=", {
              "Ref": "AWS::Region"
            },
            "",
            "\n",
            "    AWS_STACK_ID=", {
              "Ref": "AWS::StackId"
            },
            "",
            "\n",
            "    AWS_STACK_NAME=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "    AWS_IAM_MASTER_ROLE_NAME=", {
              "Ref": "MasterRole"
            },
            "",
            "\n",
            "    AWS_IAM_SLAVE_ROLE_NAME=", {
              "Ref": "PublicSlaveRole"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
            "- \"content\": |\n",
            "    MESOS_CLUSTER=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
            "- \"content\": |\n",
            "    MASTER_SOURCE=exhibitor\n",
            "    EXHIBITOR_ADDRESS=", {
              "Fn::GetAtt": [
                "InternalMasterLoadBalancer",
                "DNSName"
              ]
            },
            "",
            "\n",
            "    RESOLVERS=169.254.169.253\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
            "- \"content\": |\n",
            "    EXHIBITOR_BACKEND=AWS_S3\n",
            "    AWS_REGION=", {
              "Ref": "AWS::Region"
            },
            "",
            "\n",
            "    AWS_S3_BUCKET=", {
              "Ref": "ExhibitorS3Bucket"
            },
            "",
            "\n",
            "    AWS_S3_PREFIX=", {
              "Ref": "AWS::StackName"
            },
            "",
            "\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
            "- \"content\": |-\n",
            "    {}\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/slave_public\n",
            "- \"content\": \"\"\n",
            "  \"path\": |-\n",
            "    /etc/mesosphere/roles/aws\n"
          ]
        ]
      }
    },
    "SecurityGroups": [{
      "Ref": "PublicSlaveSecurityGroup"
    }, {
      "Ref": "AdminSecurityGroup"
    }],
    "ImageId": {
      "Fn::FindInMap": [
        "RegionToAmi", {
          "Ref": "AWS::Region"
        },
        "stable"
      ]
    }
  }
}
